@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer localizer
@{
    ViewData["Title"] = "Listado tareas";
}

    <div class="text-center">
        <h1 class=" display-4">@localizer["Mis Tareas"]</h1>
        <button type="button" class=" btn btn-primary mb-3" onclick="agregarNuevaTareaAlListedo()" >@localizer["Agregar nueva tarea"]</button>
    </div>

    <div id="contenedor-listado-tareas" class=" text-center">
        <div id="reordenable" class=" text-start" data-bind="foreach: tareas">
            <div name="tarea" class=" border mb-2 p-2" style=" cursor:pointer" data-bind="click : manejarClickTarea" >
                <div data-bind="text:titulo, hidden: esNuevo" class=" fw-bold" >
                </div>

                <div name="pasos-resumen" data-bind="visible: pasosTotal() > 0">
                    <span data-bind="text: pasosRealizados"></span>/<span data-bind="text:pasosTotal"></span>
                    <span data-bind="text:porcentajeCompletado"></span>
                </div>
                <input type="text" name="titulo-tarea" 
                autocomplete="off" 
                data-bind="value: titulo, visible: esNuevo, attr: {'data-id': id}, event: {focusout:manejarFocusOutTituloTarea} "/>
            </div>
        </div>
        <div data-bind="visible: cargando" class=" spinner-border">
            <span class="visually-hidden">Cargando ...</span>
        </div>
        <div data-bind="visible: noHayTareas">
            No existen tareas para mostrar
        </div>
    </div>

    <partial name="_ModalEditarTarea" />


@section Scripts{

    <script src="~/js/Tareas.js" asp-append-version="true"></script>
    <script src="~/js/utilidades.js" asp-append-version="true"></script>
    <script src="~/js/pasos.js" asp-append-version="true"></script>
    <script src="~/js/archivos-adjuntos.js" asp-append-version="true"></script>
    <script>

        const urlTareas = "/api/tareas";
        const urlPasos = "/api/pasos";
        const urlArchivos = "/api/archivos";
        const modalEditarTarea = document.getElementById("modal-editar-tarea");
        const modalEditarTareaBootstrap = new bootstrap.Modal(modalEditarTarea);
        
        //con la libreria knockout hacemos cosas reactivas
        function tareaListadoViewModelFn() {
            var self = this;
            self.tareas = ko.observableArray([]);
            self.cargando = ko.observable(true);
            self.noHayTareas = ko.pureComputed (function (){

                //si esta cargando puede o no que haya tareas, no sabemos aun, por lo que devolvemos false
                if (self.cargando()){
                    return false;
                }

                /*
                Si llegamos a esta linea es que cargando es false. 
                Cuando ya no esta cargando es que hay tareas o bien no hay
                Si tareas no contiene nada devolvemos true
                */
                return self.tareas().lenght === 0;
            })
        }
        function tareaElementoListadoViewModel({id,titulo, pasosTotal,pasosRealizados}){
            var self=this;
            self.id =ko.observable(id);
            self.titulo=ko.observable(titulo);
            self.pasosTotal = ko.observable(pasosTotal);
            self.pasosRealizados = ko.observable(pasosRealizados);

            self.esNuevo=ko.pureComputed(function(){
                return self.id()== 0; //una tarea es nueva si su id es 0
            })

            self.porcentajeCompletado = ko.pureComputed(function(){
                const calculo = Math.round(self.pasosRealizados()* 1.0 / self.pasosTotal()*100);
                return `(${calculo}%)`;
            })
        }
        
        //Creamos un objeto con estas propiedades dinámicas
          const tareaListadoViewModel = new tareaListadoViewModelFn ();
        
          const tareaEditarVM =  {
                id:0,
                titulo: ko.observable(''),
                descripcion: ko.observable(''),
                pasos: ko.observableArray([]),
                archivosAdjuntos: ko.observableArray([])
          }
          
          function pasoViewModel({id, descripcion, realizado, modoEdicion}){
              var self = this;
              self.id = ko.observable(id || 0);
              self.descripcion = ko.observable(descripcion || '');
              self.descripcionAnterior = '';
              self.realizado = ko.observable(realizado);
              self.modoEdicion = ko.observable(modoEdicion);

              self.esNuevo = ko.pureComputed(function (){
                  return self.id() == 0;
              })
          }

          function archivoAdjuntoViewModel({id, titulo,publicado,modoEdicion,orden, url}){
              var self=this;
              self.id = id;
              self.titulo = ko.observable(titulo || '');
              self.publicado = publicado;
              self.modoEdicion = ko.observable(modoEdicion);
              self.orden=orden;
              self.url=url;
          }
      
        obtenerTareas();
        //pasamos el binding al elemento que queremos (en el padre)
        ko.applyBindings (tareaListadoViewModel, document.getElementById('contenedor-listado-tareas'));
        ko.applyBindings (tareaEditarVM, document.getElementById('modal-editar-tarea'));
    </script>
}
